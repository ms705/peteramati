var markdownit_katex=function(){function isValidDelimiter(state,pos){var max=state.posMax;var canOpen=true;var canClose=true;var prevChar=pos>0?state.src.charCodeAt(pos-1):-1;var nextChar=pos+1<=max?state.src.charCodeAt(pos+1):-1;if(prevChar===32||prevChar===9||nextChar>=48&&nextChar<=57){canClose=false}if(nextChar===32||nextChar===9){canOpen=false}return{can_open:canOpen,can_close:canClose}}function mathInline(state,silent){var match;var token;var res;var pos;if(state.src[state.pos]!=="$"){return false}res=isValidDelimiter(state,state.pos);if(!res.can_open){if(!silent){state.pending+="$"}state.pos+=1;return true}var start=state.pos+1;match=start;while((match=state.src.indexOf("$",match))!==-1){pos=match-1;while(state.src[pos]==="\\"){pos-=1}if((match-pos)%2===1){break}match+=1}if(match===-1){if(!silent){state.pending+="$"}state.pos=start;return true}if(match-start===0){if(!silent){state.pending+="$$"}state.pos=start+1;return true}res=isValidDelimiter(state,match);if(!res.can_close){if(!silent){state.pending+="$"}state.pos=start;return true}if(!silent){token=state.push("math_inline","math",0);token.markup="$";token.content=state.src.slice(start,match)}state.pos=match+1;return true}function mathBlock(state,start,end,silent){var firstLine;var lastLine;var next;var lastPos;var found=false;var pos=state.bMarks[start]+state.tShift[start];var max=state.eMarks[start];if(pos+2>max){return false}if(state.src.slice(pos,pos+2)!=="$$"){return false}pos+=2;firstLine=state.src.slice(pos,max);if(silent){return true}if(firstLine.trim().slice(-2)==="$$"){firstLine=firstLine.trim().slice(0,-2);found=true}for(next=start;!found;){next++;if(next>=end){break}pos=state.bMarks[next]+state.tShift[next];max=state.eMarks[next];if(pos<max&&state.tShift[next]<state.blkIndent){break}if(state.src.slice(pos,max).trim().slice(-2)==="$$"){lastPos=state.src.slice(0,max).lastIndexOf("$$");lastLine=state.src.slice(pos,lastPos);found=true}}state.line=next+1;var token=state.push("math_block","math",0);token.block=true;token.content=(firstLine&&firstLine.trim()?firstLine.concat("\n"):"")+state.getLines(start+1,next,state.tShift[start],true)+(lastLine&&lastLine.trim()?lastLine:"");token.map=[start,state.line];token.markup="$$";return true}function escapeHtml(unsafe){return unsafe.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}return function mathPlugin(md,options){options=options||{};function katexInline(latex){options.displayMode=false;try{return katex.renderToString(latex,options)}catch(error){if(options.throwOnError){console.log(error)}return'<span class="katex-error" title="'.concat(escapeHtml(error.toString()),'">',escapeHtml(latex),"</span>")}}function inlineRenderer(tokens,idx){return katexInline(tokens[idx].content)}function katexBlock(latex){options.displayMode=true;try{return katex.renderToString(latex,options)}catch(error){if(options.throwOnError){console.log(error)}return'<p class="katex-block katex-error" title="'.concat(escapeHtml(error.toString()),'">',escapeHtml(latex),"</p>")}}function blockRenderer(tokens,idx){return katexBlock(tokens[idx].content).concat("\n")}md.inline.ruler.after("escape","math_inline",mathInline);md.block.ruler.after("blockquote","math_block",mathBlock,{alt:["paragraph","reference","blockquote","list"]});md.renderer.rules.math_inline=inlineRenderer;md.renderer.rules.math_block=blockRenderer}}();
