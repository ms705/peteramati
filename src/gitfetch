#! /bin/sh
if ! expr "$0" : '.*[/]' >/dev/null; then PROGDIR=./
else PROGDIR=`echo "$0" | sed 's,^\(.*/\)[^/]*$,\1,'`; fi
expr "$PROGDIR" : '[/]' >/dev/null || PROGDIR="`pwd`/$PROGDIR"
PROGDIR=`echo "$PROGDIR" | sed 's,/$,,'`
LIBDIR="$PROGDIR/../lib/"
. ${LIBDIR}dbhelper.sh

usage () {
    echo "Usage: gitfetch [-f] [--repo] REPOID [CACHEID] URL" 1>&2
    echo "       gitfetch [-f] [-u|--user] USERNAME [PSET]" 1>&2
    echo "       gitfetch [-f] [--url] URL [CACHEID]" 1>&2
    echo "       gitfetch [-f] --refresh" 1>&2
    echo "Requires GIT_USERNAME and GIT_PASSWORD from the environment." 1>&2
    exit $1
}

test -z "$GIT_REPOCACHE" && GIT_REPOCACHE="${MAINDIR}repo"
if [ ! -d "$GIT_REPOCACHE" -o -z "$GIT_USERNAME" -o -z "$GIT_PASSWORD" ]; then
    echo "Bad GIT_USERNAME/GIT_PASSWORD/GIT_REPOCACHE" 1>&2
    usage 1
fi

force= refresh= username= url= repo= types= mainbranch=
while true; do
    case "$1" in
    -f|--f|--fo|--for|--forc|--force)
        force=y; shift;;
    --ref|--refr|--refre|--refres|--refresh)
        refresh=y; types="1$types"; shift;;
    -u|--us|--use|--user|--usern|--userna|--usernam|--username)
        username=y; types="1$types"; shift;;
    --rep|--repo|--repos|--reposi|--reposit|--reposito|--repositor|--repository)
        repo=y; types="1$types"; shift;;
    --url)
        url=y; types="1$types"; shift;;
    -m)
        mainbranch="$2"; shift 2;;
    -*)
        usage 1;;
    *)
        break;;
    esac
done

if [ -z "$types" ]; then
    if expr "$1" : "[0-9][0-9]*\$" >/dev/null 2>&1; then
        repo=y
    elif ( expr "$1" : "git:" || expr "$1" : ".*@" ) >/dev/null 2>&1; then
        url=y
    else
        username=y
    fi
elif [ "$types" != 1 ]; then
    usage 1
fi

if [ -n "$refresh" ]; then
    test "$#" = 0 || usage 1
    now=`date +%s`
    result=`echo "select r.repoid, r.cacheid, r.url from Repository r
        join ContactLink l on (l.type=3 and l.link=r.repoid)
	where r.snapcheckat<$now - 900
    group by r.repoid
	order by r.snapcheckat asc limit 1" |
        ${LIBDIR}runsql.sh -N`
    repoid="`echo "$result" | awk '{ print $1 }'`"
    cacheid="`echo "$result" | awk '{ print $2 }'`"
    url="`echo "$result" | awk '{ print $3 }'`"
    test -z "$url" && exit 0
elif [ -n "$username" ]; then
    test "$#" -gt 0 -a "$#" -lt 3 || usage 1
    quoted="`echo "$1" | sql_quote`"
    psetquoted="`echo "$2" | sql_quote`"
    if [ -n "$psetquoted" ]; then psetquoted="and l.pset='$psetquoted'"; fi
    result=`echo "select r.repoid, r.cacheid, r.url from Repository r
        join ContactInfo c
        join ContactLink l on (c.contactId=l.cid and l.type=3 and l.link=r.repoid)
    where (c.seascode_username='$quoted' or c.github_username='$quoted')$psetquoted
	order by r.snapcheckat asc limit 1" |
        ${LIBDIR}runsql.sh -N`
    repoid="`echo "$result" | awk '{ print $1 }'`"
    cacheid="`echo "$result" | awk '{ print $2 }'`"
    url="`echo "$result" | awk '{ print $3 }'`"
    if test -z "$url"; then echo "No such user" 1>&2; exit 0; fi
elif [ -n "$url" ]; then
    test "$#" -gt 0 -a "$#" -lt 3 || usage 1
    urlquoted="`echo "$1" | sql_quote`"
    cacheid="$2"
    result=`echo "select r.repoid, r.cacheid, r.url from Repository r
    where r.url='$urlquoted'
    order by r.snapcheckat asc limit 1" |
        ${LIBDIR}runsql.sh -N`
    repoid="`echo "$result" | awk '{ print $1 }'`"
    if [ -z "$cacheid" ]; then cacheid="`echo "$result" | awk '{ print $2 }'`"; fi
    expr "$cacheid" : "[0-9a-f]\$" >/dev/null 2>&1 || usage 1
    url="`echo "$result" | awk '{ print $3 }'`"
    if test -z "$url"; then echo "No such repository" 1>&2; exit 0; fi
else
    test "$#" -gt 0 -a "$#" -lt 4 || usage 1
    repoid="$1"; cacheid="$2"; url="$3"
    expr "$repoid" : "[0-9][0-9]*\$" >/dev/null 2>&1 || usage 1
    expr "$cacheid" : "[0-9a-f]\$" >/dev/null 2>&1 || usage 1
    if [ -z "$cacheid" -o -z "$url" ]; then
        result=`echo "select r.repoid, r.cacheid, r.url from Repository r where r.repoid=$repoid" | ${LIBDIR}runsql.sh -N`
        test -z "$cacheid" && cacheid="`echo "$result" | awk '{ print $2 }'`"
        test -z "$url" && url="`echo "$result" | awk '{ print $3 }'`"
    fi
fi

repo_dir="$GIT_REPOCACHE/repo$cacheid"
if test ! -d "$repo_dir"; then
    mkdir -m 02770 "$repo_dir" || exit 1
    chmod g+s "$repo_dir"
    chgrp `find "$GIT_REPOCACHE" -maxdepth 0 -printf %g` "$repo_dir"
fi

old_dir="`pwd`"
cd "$repo_dir"
if test ! -d .git; then
    git init --shared=group || exit 1
fi

snaplong () {
    date '+%d/%b/%Y:%H:%M:%S %z'
}

if test ! -d .git/refs/remotes/repo$repoid && \
    ! grep '^\[remote "repo'$repoid'"\]' .git/config >/dev/null; then
    if ! git remote add repo$repoid "$url"; then
        echo "[`snaplong`] gitfetch $repoid $cacheid $url: cannot add repo"
        exit 1
    fi
fi

if test "`git config remote.repo$repoid.url`" != "$url" && \
    ! git remote set-url repo$repoid "$url"; then
    echo "[`snaplong`] gitfetch $repoid $cacheid $url: cannot change repo url"
    exit 1
fi

# fuckin git leaves a bad FETCH_HEAD around
if test -f .git/FETCH_HEAD -a ! -w .git/FETCH_HEAD; then
    rm -f .git/FETCH_HEAD
fi

git -c credential.helper= -c credential.helper='!f () { echo username=$GIT_USERNAME; echo password=$GIT_PASSWORD; }; f' fetch repo$repoid
gitfetch_status=$?

now=`date -u '+%Y%m%d.%H%M%S<%s'`
snapnow=`echo $now | sed 's/<.*//'`
snaptime=`echo $now | sed 's/.*<//'`

find_distinct_heads () {
    distinct_heads=
    xtags="`git rev-parse $tags`"
    first_head=`echo $xtags | tr ' ' '\n' | head -n 1`
    while [ -n "$xtags" ]; do
        next_head=`echo $xtags | tr ' ' '\n' | head -n 1`
        distinct_heads="`echo $next_head $distinct_heads`"
        xtags="`git log --format=%H $next_head |
            ( echo $xtags | tr ' ' '\n' ; cat ) | sort | uniq -d |
            ( echo $xtags | tr ' ' '\n' ; cat ) | sort | uniq -u`"
    done
    if expr "$distinct_heads" : ".* " >/dev/null 2>&1; then
        # sort by reverse timestamp
        distinct_heads="`for h in $distinct_heads; do
            git log -n1 --format='%ct %H' $h; done | sort -r |
            awk '{print $2}'`"
        # nl -> space, no leading/trailing space
        distinct_heads="`echo $distinct_heads`"
    fi
}

update=
if [ $gitfetch_status = 0 ]; then
    if test -f .git/refs/remotes/repo$repoid/$mainbranch; then
        cur_head=`cat .git/refs/remotes/repo$repoid/$mainbranch`
    elif test -f .git/refs/remotes/repo$repoid/master; then
        cur_head=`cat .git/refs/remotes/repo$repoid/master`
    else
        potential_branch="`ls .git/refs/remotes/repo$repoid | head -n 1`"
        if test -n "$potential_branch"; then
            cur_head=`cat .git/refs/remotes/repo$repoid/$potential_branch`
        else
            cur_head=
        fi
    fi
    tags="`git tag -l "repo$repoid.snap*" | sort -r`"
    last_tag=`echo $tags | tr ' ' '\n' | head -n 1`
    last_tag_head=`test -n "$last_tag" && cat .git/refs/tags/$last_tag`
    new_head=
    if [ -z "$cur_head" -o "$cur_head" = 0000000000000000000000000000000000000000 ]; then
        update="snaphash=null, working=$snaptime, $update"
    else
        update="snaphash='$cur_head', working=$snaptime, $update"
    fi
    if [ -n "$cur_head" -a "$last_tag_head" != "$cur_head" ]; then
        git tag "repo$repoid.snap$snapnow" $cur_head
        update="snapat='$snaptime', $update"
        new_head=y
    fi
    if [ -n "$new_head" -o -n "$force" ]; then
        log="`git log -n1 --format='%ct %s' $cur_head`"
        log_time=`echo "$log" | sed 's/^\([^ ]*\).*/\1/'`
        log_line="`echo "$log" | sed 's/^[^ ]* //'`"
        if [ -n "$log_time" ]; then
            update="snapcommitat=$log_time, snapcommitline='`echo "$log_line" | head -c 100 | sql_quote`', $update"
        fi
        find_distinct_heads
        update="heads='$distinct_heads', $update"
    fi
else
    update="working=0, "
fi

cd "$old_dir"
echo "update Repository set $update snapcheckat='$snaptime' where repoid=$repoid" | ${LIBDIR}runsql.sh
cd "$repo_dir"

if [ $gitfetch_status != 0 ]; then
    echo "[`snaplong`] gitfetch $repoid $cacheid $url: broken"
elif [ -n "$new_head" ]; then
    echo "[`snaplong`] gitfetch $repoid $cacheid $url: to $cur_head"
else
    echo "[`snaplong`] gitfetch $repoid $cacheid $url: unchanged"
fi
